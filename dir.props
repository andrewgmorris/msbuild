<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    $(OS) is set to Unix/Windows_NT. This comes from an environment variable on Windows and MSBuild on Unix.
  -->
  <PropertyGroup>
    <OsEnvironment Condition="'$(OsEnvironment)'==''">$(OS)</OsEnvironment>
  </PropertyGroup>
  
  <PropertyGroup>
    <TargetFrameworkVersion>v4.5.1</TargetFrameworkVersion>
    <!-- This is to workaround an issue with a dependent assembly (Microsoft.Build.Tasks.CodeAnalysis.dll)
         copying its dependencies (which are in the GAC). -->
    <DoNotCopyLocalIfInGac>true</DoNotCopyLocalIfInGac>
  </PropertyGroup>

   <!-- Compiler config -->
   <PropertyGroup>
     <UseRoslynCompilers>true</UseRoslynCompilers>
     <DebugSymbols Condition="'$(UseRoslynCompilers)' == 'true'">false</DebugSymbols>
  </PropertyGroup>

   <!-- Common repo directories -->
  <PropertyGroup>
    <BuildToolsVersion>1.0.25-prerelease-00080</BuildToolsVersion>
    <CompilerToolsVersion>1.0.0</CompilerToolsVersion>
    <XunitVersion>2.1.0-rc1-build3168</XunitVersion>

    <ProjectDir>$(MSBuildThisFileDirectory)</ProjectDir>
    <SourceDir>$(ProjectDir)src\</SourceDir>

    <!-- Output directories -->
    <BinDir>$(ProjectDir)bin\</BinDir>
    <TestWorkingDir>$(BinDir)tests\</TestWorkingDir>
    
    <!-- Input Directories -->
    <PackagesDir>$(ProjectDir)packages\</PackagesDir>
    <ToolsDir>$(PackagesDir)Microsoft.DotNet.BuildTools.$(BuildToolsVersion)\lib\</ToolsDir>
    <CompilerToolsDir>$(PackagesDir)Microsoft.Net.Compilers.$(CompilerToolsVersion)\tools</CompilerToolsDir>

    <BootstrapDestination>$(BinDir)Bootstrap\</BootstrapDestination>
  </PropertyGroup>

  <!-- If we're building with a bootstrapped MSBuild, use fresh extensions instead of the installed ones. -->
  <PropertyGroup Condition="'$(BootstrappedMSBuild)' == 'true'">
    <MSBuildExtensionsPath>$(BootstrapDestination)</MSBuildExtensionsPath>
  </PropertyGroup>

  <!-- list of nuget package sources passed to nuget.exe -->
  <ItemGroup>
    <NuGetSourceList Include="https:%2F%2Fwww.myget.org/F/dotnet-buildtools" />
    <NuGetSourceList Include="https:%2F%2Fwww.nuget.org/api/v2" />
  </ItemGroup>

  <!-- Common nuget properties -->
  <PropertyGroup>
    <NuGetToolPath Condition="'$(NuGetToolPath)'==''">$(PackagesDir)NuGet.exe</NuGetToolPath>
    <NuGetConfigFile>$(SourceDir).nuget\NuGet.Config</NuGetConfigFile>
    <NuGetPackageSource>@(NuGetSourceList -> '-source %(Identity)', ' ')</NuGetPackageSource>
    <NuGetConfigCommandLine>$(NuGetPackageSource) -ConfigFile "$(NuGetConfigFile)"</NuGetConfigCommandLine>

    <NugetRestoreCommand>"$(NuGetToolPath)"</NugetRestoreCommand>
    <NugetRestoreCommand>$(NugetRestoreCommand) install</NugetRestoreCommand>
    <!-- NuGet.exe doesn't like trailing slashes in the output directory argument -->
    <NugetRestoreCommand>$(NugetRestoreCommand) -OutputDirectory "$(PackagesDir.TrimEnd('/\'.ToCharArray()))"</NugetRestoreCommand>
    <NugetRestoreCommand>$(NugetRestoreCommand) $(NuGetConfigCommandLine)</NugetRestoreCommand>
    <NugetRestoreCommand>$(NugetRestoreCommand) -Verbosity detailed</NugetRestoreCommand>
    <NugetRestoreCommand Condition="'$(OsEnvironment)'=='Unix'">mono $(NuGetRestoreCommand)</NugetRestoreCommand>
  </PropertyGroup>

  <!-- Set default Configuration and Platform -->
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' ==''">Debug</Configuration>
    <Platform Condition="'$(Platform)'==''">AnyCPU</Platform>
  </PropertyGroup>

  <!-- Setup Default symbol and optimization for Configuration -->
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
    <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
    <DebugType Condition="'$(DebugType)' == ''">full</DebugType>
    <MsbuildDebugger>true</MsbuildDebugger>
    <DefineConstants>$(DefineConstants);DEBUG;TRACE;STANDALONEBUILD</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
    <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
    <DebugType Condition="'$(DebugType)' == ''">pdbonly</DebugType>
    <MsbuildDebugger>true</MsbuildDebugger>
    <DefineConstants>$(DefineConstants);TRACE;STANDALONEBUILD</DefineConstants>
  </PropertyGroup>

  <!-- Change define constants as needed -->
  <PropertyGroup>
    <DefineConstants>$(DefineConstants);FEATURE_MSBUILD_DEBUGGER</DefineConstants>
  </PropertyGroup>

  <!-- Setup some common paths -->
  <PropertyGroup>
    <CommonPath>$(SourceDir)Common\src</CommonPath>
    <CommonTestPath>$(SourceDir)Common\tests</CommonTestPath>
  </PropertyGroup>

  <!-- Setup the default output and intermediate paths -->
  <PropertyGroup>
    <BaseOutputPath>$(ProjectDir)bin\</BaseOutputPath>
    <BaseOutputPathWithConfig>$(BaseOutputPath)$(OS)\$(Configuration)\</BaseOutputPathWithConfig>
    <BaseOutputPathWithConfig Condition="'$(Platform)' != 'AnyCPU'">$(BaseOutputPath)$(Platform)\$(OS)\$(Configuration)\</BaseOutputPathWithConfig>
    <OutputPath>$(BaseOutputPathWithConfig)\</OutputPath>

    <BaseIntermediateOutputPath>$(BaseOutputPath)obj\</BaseIntermediateOutputPath>
    <IntermediateOutputPath>$(BaseIntermediateOutputPath)$(MSBuildProjectName)\$(OS)\$(Configuration)\</IntermediateOutputPath>
    <IntermediateOutputPath Condition="'$(Platform)' != 'AnyCPU'">$(BaseIntermediateOutputPath)$(MSBuildProjectName)\$(Platform)\$(OS)\$(Configuration)\</IntermediateOutputPath>

    <TestPath>$(TestWorkingDir)$(MSBuildProjectName)\$(OS)\$(Configuration)\</TestPath>
    <TestPath Condition="'$(Platform)' != 'AnyCPU'">$(TestWorkingDir)$(MSBuildProjectName)\$(Platform)\$(OS)\$(Configuration)\</TestPath>
  </PropertyGroup>

</Project>
